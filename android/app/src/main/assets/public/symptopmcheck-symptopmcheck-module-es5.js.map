{"version":3,"sources":["webpack:///src/app/symptopmcheck/symptopmcheck.page.html","webpack:///src/app/symptopmcheck/symptopmcheck-routing.module.ts","webpack:///src/app/symptopmcheck/symptopmcheck.module.ts","webpack:///src/app/symptopmcheck/symptopmcheck.page.scss","webpack:///src/app/symptopmcheck/symptopmcheck.page.ts"],"names":["routes","path","component","SymptopmcheckPageRoutingModule","imports","forChild","exports","SymptopmcheckPageModule","declarations","Storage","SymptopmcheckPage","activatedRoute","http","toastController","router","id","symptoms","name","status","symptom_check","user","email","password","phone","api_token","date_of_birth","gender","hospital_id","snapshot","paramMap","get","getUser","getJournal","key","ret","JSON","parse","value","headers","options","post","subscribe","resp","proccess","err","showError","data","selector","template"],"mappings":"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","file":"symptopmcheck-symptopmcheck-module-es5.js","sourcesContent":["export default \"<ion-header>\\n\\t<ion-toolbar color=\\\"danger\\\">\\n\\t\\t<ion-title>Cek Gejala</ion-title>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\t<ion-list>\\n\\t\\t<ion-item *ngFor=\\\"let symptom of symptoms.symptom_check\\\" class=\\\"item-terpopuler\\\">\\n\\t\\t\\t<ion-grid>\\n\\t\\t\\t\\t<ion-row>\\n\\t\\t\\t\\t\\t<ion-col center size=\\\"1\\\">\\n\\t\\t\\t\\t\\t\\t<ion-checkbox [(ngModel)]=\\\"symptom.status\\\" (click)=\\\"updateFlag(symptom.id, symptom.status)\\\"></ion-checkbox>\\n\\t\\t\\t\\t\\t</ion-col>\\n\\t\\t\\t\\t\\t<ion-col size=\\\"11\\\" center>\\n\\t\\t\\t\\t\\t\\t\\t<b>{{ symptom.symptom.name  }}</b>\\n\\t\\t\\t\\t\\t</ion-col>\\n\\t\\t\\t\\t</ion-row>\\n\\t\\t\\t</ion-grid>\\n\\t\\t</ion-item>\\n\\t</ion-list>\\n  <ion-button color=\\\"danger\\\" expand=\\\"block\\\">Simpan</ion-button>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SymptopmcheckPage } from './symptopmcheck.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SymptopmcheckPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SymptopmcheckPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SymptopmcheckPageRoutingModule } from './symptopmcheck-routing.module';\n\nimport { SymptopmcheckPage } from './symptopmcheck.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SymptopmcheckPageRoutingModule\n  ],\n  declarations: [SymptopmcheckPage]\n})\nexport class SymptopmcheckPageModule {}\n","export default \"ion-checkbox {\\n  margin: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ltcHRvcG1jaGVjay9zeW1wdG9wbWNoZWNrLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFNBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL3N5bXB0b3BtY2hlY2svc3ltcHRvcG1jaGVjay5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2hlY2tib3gge1xyXG4gICAgbWFyZ2luIDogMFxyXG59Il19 */\";","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\nimport { Plugins } from '@capacitor/core';\nimport { api_base_url } from 'src/config';\nconst { Storage } = Plugins;\n\n@Component({\n  selector: 'app-symptopmcheck',\n  templateUrl: './symptopmcheck.page.html',\n  styleUrls: ['./symptopmcheck.page.scss'],\n})\n\nexport class SymptopmcheckPage implements OnInit {\n\n  id = null\n\n  symptoms = {\n    id : null,\n    name : null,\n    status : null,\n    symptom_check : null\n  }\n\n  user = {\n    id: null,\n    name: null,\n    email: null,\n    password: null,\n    phone: null,\n    api_token: null,\n    date_of_birth: null,\n    gender: null,\n    hospital_id: null\n  }\n\n  constructor(private activatedRoute: ActivatedRoute, private http: HttpClient, public toastController: ToastController, public router: Router) { }\n\n  ngOnInit() {\n    this.id = this.activatedRoute.snapshot.paramMap.get('id');\n    this.getUser()\n  }\n\n  ionViewWillEnter() {\n    this.getJournal()\n  }\n\n  async getUser() {\n    const ret = await Storage.get({ key: 'user' });\n    this.user = JSON.parse(ret.value);\n  }\n\n  getJournal() {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.user.api_token\n    });\n\n    let options = { headers: headers };\n\n    this.http.post(api_base_url + '/symptom/detail/' + this.id, {}, options).subscribe(resp => {\n      this.proccess(resp)\n    }, err => {\n      this.showError(err)\n    });\n\n  }\n\n  proccess(resp) {\n    this.symptoms = resp.data\n  }\n  \n  showError(err){\n\n  }\n\n  updateFlag(id, status){\n\n    if(status == 1){\n      status = 0;\n    }else{\n      status = 1;\n    }\n    \n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.user.api_token });\n\n    let options = { headers: headers };\n\n\t\tthis.http.post(api_base_url + '/symptom/update', {id : id, status : status}, options).subscribe(resp => {       \n\t\t\tthis.getJournal()\n\t\t}, err => {\n\t\t\tthis.showError(err)\n\t\t});\n  }\n}"]}